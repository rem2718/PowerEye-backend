import pytest

from freezegun import freeze_time
from app.controllers.energy_controller import *
from app.models.user_model import User
from app.models.appliance_model import Appliance
from app.models.room_model import Room
from app.utils.enums import *
from bson import ObjectId
from flask import Flask,json
import mongoengine
from mongoengine import connect, disconnect




@pytest.fixture
def valid_weekly_energy_data():
    return {
        '2023-12-11': {'day': 'Mon', 'energy': 0.0},
        '2023-12-10': {'day': 'Sun', 'energy': 0.0},
        '2023-12-09': {'day': 'Sat', 'energy': 0.0},
        '2023-12-08': {'day': 'Fri', 'energy': 0.07782666666666661},
        '2023-12-07': {'day': 'Thu', 'energy': 0.0013183333333333332},
        '2023-12-06': {'day': 'Wed', 'energy': 0.009408333333333335},
        '2023-12-05': {'day': 'Tue', 'energy': 0.009381666666666668},
        '2023-12-04': {'day': 'Mon', 'energy': 0.15430333333333335},
        '2023-12-03': {'day': 'Sun', 'energy': 0.0},
        '2023-12-02': {'day': 'Sat', 'energy': 0.0},
        '2023-12-01': {'day': 'Fri', 'energy': 0.002391666666666668},
        '2023-11-30': {'day': 'Thu', 'energy': 0.0},
        '2023-11-29': {'day': 'Wed', 'energy': 0.0},
        '2023-11-28': {'day': 'Tue', 'energy': 0.0014883333333333335},
        '2023-11-27': {'day': 'Mon', 'energy': 0.0},
        '2023-11-26': {'day': 'Sun', 'energy': 0.0},
        '2023-11-25': {'day': 'Sat', 'energy': 0.000105},
        '2023-11-24': {'day': 'Fri', 'energy': 0.0005499999999999999},
        '2023-11-23': {'day': 'Thu', 'energy': 0.004456666666666667},
        '2023-11-22': {'day': 'Wed', 'energy': 0.0},
        '2023-11-21': {'day': 'Tue', 'energy': 0.0},
        '2023-11-20': {'day': 'Mon', 'energy': 0.00903},
        '2023-11-19': {'day': 'Sun', 'energy': 0.0225},
        '2023-11-18': {'day': 'Sat', 'energy': 0.027481666666666665},
        '2023-11-17': {'day': 'Fri', 'energy': 0.04416166666666667},
        '2023-11-16': {'day': 'Thu', 'energy': 0.0},
        '2023-11-15': {'day': 'Wed', 'energy': 0.0},
        '2023-11-14': {'day': 'Tue', 'energy': 0.0},
        '2023-11-13': {'day': 'Mon', 'energy': 0.0},
    }


@freeze_time("2023-12-11")  # Freeze time to a specific date for testing
def test_convert_to_weekly_energy_format_with_valid_data(valid_weekly_energy_data):
    result = convert_to_weekly_energy_format(valid_weekly_energy_data)
    # Define expected result for valid input
    expected_result = [
        {
            "energy": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            "label": ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
            "title": "This Week"
        },
        {
            "energy": [
                0.15430333333333335,
                0.009381666666666668,
                0.009408333333333335,
                0.0013183333333333332,
                0.07782666666666661,
                0.0,
                0.0
            ],
            "label": [
                "Mon",
                "Tue",
                "Wed",
                "Thu",
                "Fri",
                "Sat",
                "Sun"
            ],
            "title": "1 Week ago"
        },
        {
            "energy": [
                0.0,
                0.0014883333333333335,
                0.0,
                0.0,
                0.002391666666666668,
                0.0,
                0.0
            ],
            "label": [
                "Mon",
                "Tue",
                "Wed",
                "Thu",
                "Fri",
                "Sat",
                "Sun"
            ],
            "title": "2 Weeks ago"
        },
        {
            "energy": [
                0.00903,
                0.0,
                0.0,
                0.004456666666666667,
                0.0005499999999999999,
                0.000105,
                0.0
            ],
            "label": [
                "Mon",
                "Tue",
                "Wed",
                "Thu",
                "Fri",
                "Sat",
                "Sun"
            ],
            "title": "3 Weeks ago"
        },
        {
            "energy": [
                0.0,
                0.0,
                0.0,
                0.0,
                0.04416166666666667,
                0.027481666666666665,
                0.0225
            ],
            "label": [
                "Mon",
                "Tue",
                "Wed",
                "Thu",
                "Fri",
                "Sat",
                "Sun"
            ],
            "title": "4 Weeks ago"
        }
    ]
    assert result == expected_result



def test_convert_to_weekly_energy_format_with_empty_data():
    result = convert_to_weekly_energy_format({})
    assert result == []
    
@freeze_time("2023-12-11")  # Freeze time to a specific date for testing
def test_convert_to_weekly_energy_format_with_invalid_date_format(valid_weekly_energy_data):
    # Change the date format to an invalid one
    invalid_date_format_energy_data = valid_weekly_energy_data.copy()
    invalid_date_format_energy_data['invalid_date'] = {'day': 9, 'energy': 0.0}
    
    with pytest.raises(ValueError):
        convert_to_weekly_energy_format(invalid_date_format_energy_data)
# _____________________________________________________________________

@pytest.fixture
def valid_monthly_energy_data():
    return {'2023-01-01': 0, '2023-01-02': 0, '2023-01-03': 0, '2023-01-04': 0, '2023-01-05': 0, '2023-01-06': 0, '2023-01-07': 0, '2023-01-08': 0, '2023-01-09': 0, '2023-01-10': 0, '2023-01-11': 0, '2023-01-12': 0, '2023-01-13': 0, '2023-01-14': 0, '2023-01-15': 0, '2023-01-16': 0, '2023-01-17': 0, '2023-01-18': 0, '2023-01-19': 0, '2023-01-20': 0, '2023-01-21': 0, '2023-01-22': 0, '2023-01-23': 0, '2023-01-24': 0, '2023-01-25': 0, '2023-01-26': 0, '2023-01-27': 0, '2023-01-28': 0, '2023-01-29': 0, '2023-01-30': 0, '2023-01-31': 0, '2023-02-01': 0, '2023-02-02': 0, '2023-02-03': 0, '2023-02-04': 0, '2023-02-05': 0, '2023-02-06': 0, '2023-02-07': 0, '2023-02-08': 0, '2023-02-09': 0, '2023-02-10': 0, '2023-02-11': 0, '2023-02-12': 0, '2023-02-13': 0, '2023-02-14': 0, '2023-02-15': 0, '2023-02-16': 0, '2023-02-17': 0, '2023-02-18': 0, '2023-02-19': 0, '2023-02-20': 0, '2023-02-21': 0, '2023-02-22': 0, '2023-02-23': 0, '2023-02-24': 0, '2023-02-25': 0, '2023-02-26': 0, '2023-02-27': 0, '2023-02-28': 0, '2023-03-01': 0, '2023-03-02': 0, '2023-03-03': 0, '2023-03-04': 0, '2023-03-05': 0, '2023-03-06': 0, '2023-03-07': 0, '2023-03-08': 0, '2023-03-09': 0, '2023-03-10': 0, '2023-03-11': 0, '2023-03-12': 0, '2023-03-13': 0, '2023-03-14': 0, '2023-03-15': 0, '2023-03-16': 0, '2023-03-17': 0, '2023-03-18': 0, '2023-03-19': 0, '2023-03-20': 0, '2023-03-21': 0, '2023-03-22': 0, '2023-03-23': 0, '2023-03-24': 0, '2023-03-25': 0, '2023-03-26': 0, '2023-03-27': 0, '2023-03-28': 0, '2023-03-29': 0, '2023-03-30': 0, '2023-03-31': 0, '2023-04-01': 0, '2023-04-02': 0, '2023-04-03': 0, '2023-04-04': 0, '2023-04-05': 0, '2023-04-06': 0, '2023-04-07': 0, '2023-04-08': 0, '2023-04-09': 0, '2023-04-10': 0, '2023-04-11': 0, '2023-04-12': 0, '2023-04-13': 0, '2023-04-14': 0, '2023-04-15': 0, '2023-04-16': 0, '2023-04-17': 0, '2023-04-18': 0, '2023-04-19': 0, '2023-04-20': 0, '2023-04-21': 0, '2023-04-22': 0, '2023-04-23': 0, '2023-04-24': 0, '2023-04-25': 0, '2023-04-26': 0, '2023-04-27': 0, '2023-04-28': 0, '2023-04-29': 0, '2023-04-30': 0, '2023-05-01': 0, '2023-05-02': 0, '2023-05-03': 0, '2023-05-04': 0, '2023-05-05': 0, '2023-05-06': 0, '2023-05-07': 0, '2023-05-08': 0, '2023-05-09': 0, '2023-05-10': 0, '2023-05-11': 0, '2023-05-12': 0, '2023-05-13': 0, '2023-05-14': 0, '2023-05-15': 0, '2023-05-16': 0, '2023-05-17': 0, '2023-05-18': 0, '2023-05-19': 0, '2023-05-20': 0, '2023-05-21': 0, '2023-05-22': 0, '2023-05-23': 0, '2023-05-24': 0, '2023-05-25': 0, '2023-05-26': 0, '2023-05-27': 0, '2023-05-28': 0, '2023-05-29': 0, '2023-05-30': 0, '2023-05-31': 0, '2023-06-01': 0, '2023-06-02': 0, '2023-06-03': 0, '2023-06-04': 0, '2023-06-05': 0, '2023-06-06': 0, '2023-06-07': 0, '2023-06-08': 0, '2023-06-09': 0, '2023-06-10': 0, '2023-06-11': 0, '2023-06-12': 0, '2023-06-13': 0, '2023-06-14': 0, '2023-06-15': 0, '2023-06-16': 0, '2023-06-17': 0, '2023-06-18': 0, '2023-06-19': 0, '2023-06-20': 0, '2023-06-21': 0, '2023-06-22': 0, '2023-06-23': 0, '2023-06-24': 0, '2023-06-25': 0, '2023-06-26': 0, '2023-06-27': 0, '2023-06-28': 0, '2023-06-29': 0, '2023-06-30': 0, '2023-07-01': 0, '2023-07-02': 0, '2023-07-03': 0, '2023-07-04': 0, '2023-07-05': 0, '2023-07-06': 0, '2023-07-07': 0, '2023-07-08': 0, '2023-07-09': 0, '2023-07-10': 0, '2023-07-11': 0, '2023-07-12': 0, '2023-07-13': 0, '2023-07-14': 0, '2023-07-15': 0, '2023-07-16': 0, '2023-07-17': 0, '2023-07-18': 0, '2023-07-19': 0, '2023-07-20': 0, '2023-07-21': 0, '2023-07-22': 0, '2023-07-23': 0, '2023-07-24': 0, '2023-07-25': 0, '2023-07-26': 0, '2023-07-27': 0, '2023-07-28': 0, '2023-07-29': 0, '2023-07-30': 0, '2023-07-31': 0, '2023-08-01': 0, '2023-08-02': 0, '2023-08-03': 0, '2023-08-04': 0, '2023-08-05': 0, '2023-08-06': 0, '2023-08-07': 0, '2023-08-08': 0, '2023-08-09': 0, '2023-08-10': 0, '2023-08-11': 0, '2023-08-12': 0, '2023-08-13': 0, '2023-08-14': 0, '2023-08-15': 0, '2023-08-16': 0, '2023-08-17': 0, '2023-08-18': 0, '2023-08-19': 0, '2023-08-20': 0.08741113333333332, '2023-08-21': 0.3946781833333333, '2023-08-22': 0.1999291, '2023-08-23': 0.37269586666666665, '2023-08-24': 0.18246838333333334, '2023-08-25': 0.26546854999999997, '2023-08-26': 0.23821593333333332, '2023-08-27': 0.19541611666666667, '2023-08-28': 0.1804914, '2023-08-29': 0.17629881666666666, '2023-08-30': 0.20187313333333334, '2023-08-31': 0.4221907833333333, '2023-09-01': 0.06989196666666667, '2023-09-02': 0.031014566666666667, '2023-09-03': 0.0471487, '2023-09-04': 0.026269133333333333, '2023-09-05': 0.03185266666666667, '2023-09-06': 0.030969216666666667, '2023-09-07': 0.0379018, '2023-09-08': 0.36574911666666665, '2023-09-09': 0.04586666666666667, '2023-09-10': 0.15833981666666666, '2023-09-11': 0.21817893333333332, '2023-09-12': 0.16461226666666667, '2023-09-13': 0.16371421666666666, '2023-09-14': 0.4006519, '2023-09-15': 0.22996755, '2023-09-16': 0.019316833333333335, '2023-09-17': 0.2230406, '2023-09-18': 0.03991086666666667, '2023-09-19': 0.013921516666666666, '2023-09-20': 0.011659516666666666, '2023-09-21': 0.02508645, '2023-09-22': 0.23235666666666666, '2023-09-23': 0.034521616666666664, '2023-09-24': 0.43533155, '2023-09-25': 0.0369327, '2023-09-26': 0.04210626666666666, '2023-09-27': 0.029954566666666665, '2023-09-28': 0.21038286666666667, '2023-09-29': 0.052125533333333335, '2023-09-30': 0.044696683333333334, '2023-10-01': 0.059536, '2023-10-02': 0.03742921666666667, '2023-10-03': 0.029712683333333333, '2023-10-04': 0.04674421666666667, '2023-10-05': 0.012620283333333333, '2023-10-06': 0.03230433333333333, '2023-10-07': 0.2632463333333333, '2023-10-08': 0.0, '2023-10-09': 0.0, '2023-10-10': 0.0, '2023-10-11': 0.0, '2023-10-12': 0.0, '2023-10-13': 0.0, '2023-10-14': 0.0, '2023-10-15': 0.0, '2023-10-16': 0.0, '2023-10-17': 0.0, '2023-10-18': 0.0, '2023-10-19': 0.0, '2023-10-20': 0.0, '2023-10-21': 0.3298789833333333, '2023-10-22': 0.06662178333333334, '2023-10-23': 0.0067658, '2023-10-24': 0.034120283333333334, '2023-10-25': 0.022909350000000002, '2023-10-26': 0.24060845, '2023-10-27': 0.029783983333333333, '2023-10-28': 0.050363783333333335, '2023-10-29': 0.04389673333333333, '2023-10-30': 0.023427066666666666, '2023-10-31': 0.050756583333333334, '2023-11-01': 0.006650633333333334, '2023-11-02': 0.6970953, '2023-11-03': 0.8675464833333333, '2023-11-04': 0.5578414666666667, '2023-11-05': 0.23463466666666666, '2023-11-06': 0.2504754166666667, '2023-11-07': 0.6166812, '2023-11-08': 0.39879881666666667, '2023-11-09': 0.3914068, '2023-11-10': 0.16225638333333334, '2023-11-11': 0.2954592, '2023-11-12': 0.0561843, '2023-11-13': 0.04028193333333333, '2023-11-14': 0.02828235, '2023-11-15': 0.0270265, '2023-11-16': 0.4314047166666667, '2023-11-17': 0.36852186666666664, '2023-11-18': 0.9387672833333334, '2023-11-19': 1.07937115, '2023-11-20': 0.2962164, '2023-11-21': 0.67490645, '2023-11-22': 0.6218327, '2023-11-23': 0.040052116666666665, '2023-11-24': 0.0549299, '2023-11-25': 0.052042866666666666, '2023-11-26': 0.0690341, '2023-11-27': 0.06125786666666667, '2023-11-28': 0.022776149999999953, '2023-11-29': 0.043505799999999636, '2023-11-30': 0.046522566666666286, '2023-12-01': 0.07994931666666695, '2023-12-02': 0.037210049999999946, '2023-12-03': 0.054972549999999884, '2023-12-04': 0.05454144999999949, '2023-12-05': 0.03394076666666633, '2023-12-06': 0.03280714999999974, '2023-12-07': 0.03375766666666642, '2023-12-08': 0.02794449999999986, '2023-12-09': 0.0464874666666662, '2023-12-10': 0.036548466666666606, '2023-12-11': 0.055115016666666246, '2023-12-12': 0, '2023-12-13': 0, '2023-12-14': 0, '2023-12-15': 0, '2023-12-16': 0, '2023-12-17': 0, '2023-12-18': 0, '2023-12-19': 0, '2023-12-20': 0, '2023-12-21': 0, '2023-12-22': 0, '2023-12-23': 0, '2023-12-24': 0, '2023-12-25': 0, '2023-12-26': 0, '2023-12-27': 0, '2023-12-28': 0, '2023-12-29': 0, '2023-12-30': 0, '2023-12-31': 0}



    
@freeze_time("2023-12-11")  # Freeze time to a specific date for testing    
def test_convert_to_monthly_energy_format_with_valid_data(valid_monthly_energy_data):
    result = convert_to_monthly_energy_format(valid_monthly_energy_data)
    # Define expected result for valid input
    expected_result =  [
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "label": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31
            ],
            "title": "Jan"
        },
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "label": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28
            ],
            "title": "Feb"
        },
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "label": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31
            ],
            "title": "Mar"
        },
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "label": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30
            ],
            "title": "Apr"
        },
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "label": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31
            ],
            "title": "May"
        },
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "label": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30
            ],
            "title": "Jun"
        },
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "label": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31
            ],
            "title": "Jul"
        },
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.08741113333333332,
                0.3946781833333333,
                0.1999291,
                0.37269586666666665,
                0.18246838333333334,
                0.26546854999999997,
                0.23821593333333332,
                0.19541611666666667,
                0.1804914,
                0.17629881666666666,
                0.20187313333333334,
                0.4221907833333333
            ],
            "label": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31
            ],
            "title": "Aug"
        },
        {
            "energy": [
                0.06989196666666667,
                0.031014566666666667,
                0.0471487,
                0.026269133333333333,
                0.03185266666666667,
                0.030969216666666667,
                0.0379018,
                0.36574911666666665,
                0.04586666666666667,
                0.15833981666666666,
                0.21817893333333332,
                0.16461226666666667,
                0.16371421666666666,
                0.4006519,
                0.22996755,
                0.019316833333333335,
                0.2230406,
                0.03991086666666667,
                0.013921516666666666,
                0.011659516666666666,
                0.02508645,
                0.23235666666666666,
                0.034521616666666664,
                0.43533155,
                0.0369327,
                0.04210626666666666,
                0.029954566666666665,
                0.21038286666666667,
                0.052125533333333335,
                0.044696683333333334
            ],
            "label": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30
            ],
            "title": "Sep"
        },
        {
            "energy": [
                0.059536,
                0.03742921666666667,
                0.029712683333333333,
                0.04674421666666667,
                0.012620283333333333,
                0.03230433333333333,
                0.2632463333333333,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.3298789833333333,
                0.06662178333333334,
                0.0067658,
                0.034120283333333334,
                0.022909350000000002,
                0.24060845,
                0.029783983333333333,
                0.050363783333333335,
                0.04389673333333333,
                0.023427066666666666,
                0.050756583333333334
            ],
            "label": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31
            ],
            "title": "Oct"
        },
        {
            "energy": [
                0.006650633333333334,
                0.6970953,
                0.8675464833333333,
                0.5578414666666667,
                0.23463466666666666,
                0.2504754166666667,
                0.6166812,
                0.39879881666666667,
                0.3914068,
                0.16225638333333334,
                0.2954592,
                0.0561843,
                0.04028193333333333,
                0.02828235,
                0.0270265,
                0.4314047166666667,
                0.36852186666666664,
                0.9387672833333334,
                1.07937115,
                0.2962164,
                0.67490645,
                0.6218327,
                0.040052116666666665,
                0.0549299,
                0.052042866666666666,
                0.0690341,
                0.06125786666666667,
                0.022776149999999953,
                0.043505799999999636,
                0.046522566666666286
            ],
            "label": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30
            ],
            "title": "Nov"
        },
        {
            "energy": [
                0.07994931666666695,
                0.037210049999999946,
                0.054972549999999884,
                0.05454144999999949,
                0.03394076666666633,
                0.03280714999999974,
                0.03375766666666642,
                0.02794449999999986,
                0.0464874666666662,
                0.036548466666666606,
                0.055115016666666246,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "label": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31
            ],
            "title": "Dec"
        }
    ]
    assert result == expected_result

def test_empty_input():
    result = convert_to_monthly_energy_format({})
    assert result == []
    
@freeze_time("2023-12-11")  # Freeze time to a specific date for testing
def test_convert_to_monthly_energy_format_with_invalid_data(valid_monthly_energy_data):
    invalid_date_format_energy_data = valid_monthly_energy_data.copy()
    invalid_date_format_energy_data['invalid_date'] = {'90-t5-2020': 0}
    
    with pytest.raises(ValueError):
        convert_to_monthly_energy_format(invalid_date_format_energy_data)


# _________________________________________
@pytest.fixture
def valid_yearly_energy_data():
    return {'2019-01-01': 0, '2019-01-02': 0, '2019-01-03': 0, '2019-01-04': 0, '2019-01-05': 0, '2019-01-06': 0, '2019-01-07': 0, '2019-01-08': 0, '2019-01-09': 0, '2019-01-10': 0, '2019-01-11': 0, '2019-01-12': 0, '2019-01-13': 0, '2019-01-14': 0, '2019-01-15': 0, '2019-01-16': 0, '2019-01-17': 0, '2019-01-18': 0, '2019-01-19': 0, '2019-01-20': 0, '2019-01-21': 0, '2019-01-22': 0, '2019-01-23': 0, '2019-01-24': 0, '2019-01-25': 0, '2019-01-26': 0, '2019-01-27': 0, '2019-01-28': 0, '2019-01-29': 0, '2019-01-30': 0, '2019-01-31': 0, '2019-02-01': 0, '2019-02-02': 0, '2019-02-03': 0, '2019-02-04': 0, '2019-02-05': 0, '2019-02-06': 0, '2019-02-07': 0, '2019-02-08': 0, '2019-02-09': 0, '2019-02-10': 0, '2019-02-11': 0, '2019-02-12': 0, '2019-02-13': 0, '2019-02-14': 0, '2019-02-15': 0, '2019-02-16': 0, '2019-02-17': 0, '2019-02-18': 0, '2019-02-19': 0, '2019-02-20': 0, '2019-02-21': 0, '2019-02-22': 0, '2019-02-23': 0, '2019-02-24': 0, '2019-02-25': 0, '2019-02-26': 0, '2019-02-27': 0, '2019-02-28': 0, '2019-03-01': 0, '2019-03-02': 0, '2019-03-03': 0, '2019-03-04': 0, '2019-03-05': 0, '2019-03-06': 0, '2019-03-07': 0, '2019-03-08': 0, '2019-03-09': 0, '2019-03-10': 0, '2019-03-11': 0, '2019-03-12': 0, '2019-03-13': 0, '2019-03-14': 0, '2019-03-15': 0, '2019-03-16': 0, '2019-03-17': 0, '2019-03-18': 0, '2019-03-19': 0, '2019-03-20': 0, '2019-03-21': 0, '2019-03-22': 0, '2019-03-23': 0, '2019-03-24': 0, '2019-03-25': 0, '2019-03-26': 0, '2019-03-27': 0, '2019-03-28': 0, '2019-03-29': 0, '2019-03-30': 0, '2019-03-31': 0, '2019-04-01': 0, '2019-04-02': 0, '2019-04-03': 0, '2019-04-04': 0, '2019-04-05': 0, '2019-04-06': 0, '2019-04-07': 0, '2019-04-08': 0, '2019-04-09': 0, '2019-04-10': 0, '2019-04-11': 0, '2019-04-12': 0, '2019-04-13': 0, '2019-04-14': 0, '2019-04-15': 0, '2019-04-16': 0, '2019-04-17': 0, '2019-04-18': 0, '2019-04-19': 0, '2019-04-20': 0, '2019-04-21': 0, '2019-04-22': 0, '2019-04-23': 0, '2019-04-24': 0, '2019-04-25': 0, '2019-04-26': 0, '2019-04-27': 0, '2019-04-28': 0, '2019-04-29': 0, '2019-04-30': 0, '2019-05-01': 0, '2019-05-02': 0, '2019-05-03': 0, '2019-05-04': 0, '2019-05-05': 0, '2019-05-06': 0, '2019-05-07': 0, '2019-05-08': 0, '2019-05-09': 0, '2019-05-10': 0, '2019-05-11': 0, '2019-05-12': 0, '2019-05-13': 0, '2019-05-14': 0, '2019-05-15': 0, '2019-05-16': 0, '2019-05-17': 0, '2019-05-18': 0, '2019-05-19': 0, '2019-05-20': 0, '2019-05-21': 0, '2019-05-22': 0, '2019-05-23': 0, '2019-05-24': 0, '2019-05-25': 0, '2019-05-26': 0, '2019-05-27': 0, '2019-05-28': 0, '2019-05-29': 0, '2019-05-30': 0, '2019-05-31': 0, '2019-06-01': 0, '2019-06-02': 0, '2019-06-03': 0, '2019-06-04': 0, '2019-06-05': 0, '2019-06-06': 0, '2019-06-07': 0, '2019-06-08': 0, '2019-06-09': 0, '2019-06-10': 0, '2019-06-11': 0, '2019-06-12': 0, '2019-06-13': 0, '2019-06-14': 0, '2019-06-15': 0, '2019-06-16': 0, '2019-06-17': 0, '2019-06-18': 0, '2019-06-19': 0, '2019-06-20': 0, '2019-06-21': 0, '2019-06-22': 0, '2019-06-23': 0, '2019-06-24': 0, '2019-06-25': 0, '2019-06-26': 0, '2019-06-27': 0, '2019-06-28': 0, '2019-06-29': 0, '2019-06-30': 0, '2019-07-01': 0, '2019-07-02': 0, '2019-07-03': 0, '2019-07-04': 0, '2019-07-05': 0, '2019-07-06': 0, '2019-07-07': 0, '2019-07-08': 0, '2019-07-09': 0, '2019-07-10': 0, '2019-07-11': 0, '2019-07-12': 0, '2019-07-13': 0, '2019-07-14': 0, '2019-07-15': 0, '2019-07-16': 0, '2019-07-17': 0, '2019-07-18': 0, '2019-07-19': 0, '2019-07-20': 0, '2019-07-21': 0, '2019-07-22': 0, '2019-07-23': 0, '2019-07-24': 0, '2019-07-25': 0, '2019-07-26': 0, '2019-07-27': 0, '2019-07-28': 0, '2019-07-29': 0, '2019-07-30': 0, '2019-07-31': 0, '2019-08-01': 0, '2019-08-02': 0, '2019-08-03': 0, '2019-08-04': 0, '2019-08-05': 0, '2019-08-06': 0, '2019-08-07': 0, '2019-08-08': 0, '2019-08-09': 0, '2019-08-10': 0, '2019-08-11': 0, '2019-08-12': 0, '2019-08-13': 0, '2019-08-14': 0, '2019-08-15': 0, '2019-08-16': 0, '2019-08-17': 0, '2019-08-18': 0, '2019-08-19': 0, '2019-08-20': 0, '2019-08-21': 0, '2019-08-22': 0, '2019-08-23': 0, '2019-08-24': 0, '2019-08-25': 0, '2019-08-26': 0, '2019-08-27': 0, '2019-08-28': 0, '2019-08-29': 0, '2019-08-30': 0, '2019-08-31': 0, '2019-09-01': 0, '2019-09-02': 0, '2019-09-03': 0, '2019-09-04': 0, '2019-09-05': 0, '2019-09-06': 0, '2019-09-07': 0, '2019-09-08': 0, '2019-09-09': 0, '2019-09-10': 0, '2019-09-11': 0, '2019-09-12': 0, '2019-09-13': 0, '2019-09-14': 0, '2019-09-15': 0, '2019-09-16': 0, '2019-09-17': 0, '2019-09-18': 0, '2019-09-19': 0, '2019-09-20': 0, '2019-09-21': 0, '2019-09-22': 0, '2019-09-23': 0, '2019-09-24': 0, '2019-09-25': 0, '2019-09-26': 0, '2019-09-27': 0, '2019-09-28': 0, '2019-09-29': 0, '2019-09-30': 0, '2019-10-01': 0, '2019-10-02': 0, '2019-10-03': 0, '2019-10-04': 0, '2019-10-05': 0, '2019-10-06': 0, '2019-10-07': 0, '2019-10-08': 0, '2019-10-09': 0, '2019-10-10': 0, '2019-10-11': 0, '2019-10-12': 0, '2019-10-13': 0, '2019-10-14': 0, '2019-10-15': 0, '2019-10-16': 0, '2019-10-17': 0, '2019-10-18': 0, '2019-10-19': 0, '2019-10-20': 0, '2019-10-21': 0, '2019-10-22': 0, '2019-10-23': 0, '2019-10-24': 0, '2019-10-25': 0, '2019-10-26': 0, '2019-10-27': 0, '2019-10-28': 0, '2019-10-29': 0, '2019-10-30': 0, '2019-10-31': 0, '2019-11-01': 0, '2019-11-02': 0, '2019-11-03': 0, '2019-11-04': 0, '2019-11-05': 0, '2019-11-06': 0, '2019-11-07': 0, '2019-11-08': 0, '2019-11-09': 0, '2019-11-10': 0, '2019-11-11': 0, '2019-11-12': 0, '2019-11-13': 0, '2019-11-14': 0, '2019-11-15': 0, '2019-11-16': 0, '2019-11-17': 0, '2019-11-18': 0, '2019-11-19': 0, '2019-11-20': 0, '2019-11-21': 0, '2019-11-22': 0, '2019-11-23': 0, '2019-11-24': 0, '2019-11-25': 0, '2019-11-26': 0, '2019-11-27': 0, '2019-11-28': 0, '2019-11-29': 0, '2019-11-30': 0, '2019-12-01': 0, '2019-12-02': 0, '2019-12-03': 0, '2019-12-04': 0, '2019-12-05': 0, '2019-12-06': 0, '2019-12-07': 0, '2019-12-08': 0, '2019-12-09': 0, '2019-12-10': 0, '2019-12-11': 0, '2019-12-12': 0, '2019-12-13': 0, '2019-12-14': 0, '2019-12-15': 0, '2019-12-16': 0, '2019-12-17': 0, '2019-12-18': 0, '2019-12-19': 0, '2019-12-20': 0, '2019-12-21': 0, '2019-12-22': 0, '2019-12-23': 0, '2019-12-24': 0, '2019-12-25': 0, '2019-12-26': 0, '2019-12-27': 0, '2019-12-28': 0, '2019-12-29': 0, '2019-12-30': 0, '2019-12-31': 0, '2020-01-01': 0, '2020-01-02': 0, '2020-01-03': 0, '2020-01-04': 0, '2020-01-05': 0, '2020-01-06': 0, '2020-01-07': 0, '2020-01-08': 0, '2020-01-09': 0, '2020-01-10': 0, '2020-01-11': 0, '2020-01-12': 0, '2020-01-13': 0, '2020-01-14': 0, '2020-01-15': 0, '2020-01-16': 0, '2020-01-17': 0, '2020-01-18': 0, '2020-01-19': 0, '2020-01-20': 0, '2020-01-21': 0, '2020-01-22': 0, '2020-01-23': 0, '2020-01-24': 0, '2020-01-25': 0, '2020-01-26': 0, '2020-01-27': 0, '2020-01-28': 0, '2020-01-29': 0, '2020-01-30': 0, '2020-01-31': 0, '2020-02-01': 0, '2020-02-02': 0, '2020-02-03': 0, '2020-02-04': 0, '2020-02-05': 0, '2020-02-06': 0, '2020-02-07': 0, '2020-02-08': 0, '2020-02-09': 0, '2020-02-10': 0, '2020-02-11': 0, '2020-02-12': 0, '2020-02-13': 0, '2020-02-14': 0, '2020-02-15': 0, '2020-02-16': 0, '2020-02-17': 0, '2020-02-18': 0, '2020-02-19': 0, '2020-02-20': 0, '2020-02-21': 0, '2020-02-22': 0, '2020-02-23': 0, '2020-02-24': 0, '2020-02-25': 0, '2020-02-26': 0, '2020-02-27': 0, '2020-02-28': 0, '2020-02-29': 0, '2020-03-01': 0, '2020-03-02': 0, '2020-03-03': 0, '2020-03-04': 0, '2020-03-05': 0, '2020-03-06': 0, '2020-03-07': 0, '2020-03-08': 0, '2020-03-09': 0, '2020-03-10': 0, '2020-03-11': 0, '2020-03-12': 0, '2020-03-13': 0, '2020-03-14': 0, '2020-03-15': 0, '2020-03-16': 0, '2020-03-17': 0, '2020-03-18': 0, '2020-03-19': 0, '2020-03-20': 0, '2020-03-21': 0, '2020-03-22': 0, '2020-03-23': 0, '2020-03-24': 0, '2020-03-25': 0, '2020-03-26': 0, '2020-03-27': 0, '2020-03-28': 0, '2020-03-29': 0, '2020-03-30': 0, '2020-03-31': 0, '2020-04-01': 0, '2020-04-02': 0, '2020-04-03': 0, '2020-04-04': 0, '2020-04-05': 0, '2020-04-06': 0, '2020-04-07': 0, '2020-04-08': 0, '2020-04-09': 0, '2020-04-10': 0, '2020-04-11': 0, '2020-04-12': 0, '2020-04-13': 0, '2020-04-14': 0, '2020-04-15': 0, '2020-04-16': 0, '2020-04-17': 0, '2020-04-18': 0, '2020-04-19': 0, '2020-04-20': 0, '2020-04-21': 0, '2020-04-22': 0, '2020-04-23': 0, '2020-04-24': 0, '2020-04-25': 0, '2020-04-26': 0, '2020-04-27': 0, '2020-04-28': 0, '2020-04-29': 0, '2020-04-30': 0, '2020-05-01': 0, '2020-05-02': 0, '2020-05-03': 0, '2020-05-04': 0, '2020-05-05': 0, '2020-05-06': 0, '2020-05-07': 0, '2020-05-08': 0, '2020-05-09': 0, '2020-05-10': 0, '2020-05-11': 0, '2020-05-12': 0, '2020-05-13': 0, '2020-05-14': 0, '2020-05-15': 0, '2020-05-16': 0, '2020-05-17': 0, '2020-05-18': 0, '2020-05-19': 0, '2020-05-20': 0, '2020-05-21': 0, '2020-05-22': 0, '2020-05-23': 0, '2020-05-24': 0, '2020-05-25': 0, '2020-05-26': 0, '2020-05-27': 0, '2020-05-28': 0, '2020-05-29': 0, '2020-05-30': 0, '2020-05-31': 0, '2020-06-01': 0, '2020-06-02': 0, '2020-06-03': 0, '2020-06-04': 0, '2020-06-05': 0, '2020-06-06': 0, '2020-06-07': 0, '2020-06-08': 0, '2020-06-09': 0, '2020-06-10': 0, '2020-06-11': 0, '2020-06-12': 0, '2020-06-13': 0, '2020-06-14': 0, '2020-06-15': 0, '2020-06-16': 0, '2020-06-17': 0, '2020-06-18': 0, '2020-06-19': 0, '2020-06-20': 0, '2020-06-21': 0, '2020-06-22': 0, '2020-06-23': 0, '2020-06-24': 0, '2020-06-25': 0, '2020-06-26': 0, '2020-06-27': 0, '2020-06-28': 0, '2020-06-29': 0, '2020-06-30': 0, '2020-07-01': 0, '2020-07-02': 0, '2020-07-03': 0, '2020-07-04': 0, '2020-07-05': 0, '2020-07-06': 0, '2020-07-07': 0, '2020-07-08': 0, '2020-07-09': 0, '2020-07-10': 0, '2020-07-11': 0, '2020-07-12': 0, '2020-07-13': 0, '2020-07-14': 0, '2020-07-15': 0, '2020-07-16': 0, '2020-07-17': 0, '2020-07-18': 0, '2020-07-19': 0, '2020-07-20': 0, '2020-07-21': 0, '2020-07-22': 0, '2020-07-23': 0, '2020-07-24': 0, '2020-07-25': 0, '2020-07-26': 0, '2020-07-27': 0, '2020-07-28': 0, '2020-07-29': 0, '2020-07-30': 0, '2020-07-31': 0, '2020-08-01': 0, '2020-08-02': 0, '2020-08-03': 0, '2020-08-04': 0, '2020-08-05': 0, '2020-08-06': 0, '2020-08-07': 0, '2020-08-08': 0, '2020-08-09': 0, '2020-08-10': 0, '2020-08-11': 0, '2020-08-12': 0, '2020-08-13': 0, '2020-08-14': 0, '2020-08-15': 0, '2020-08-16': 0, '2020-08-17': 0, '2020-08-18': 0, '2020-08-19': 0, '2020-08-20': 0, '2020-08-21': 0, '2020-08-22': 0, '2020-08-23': 0, '2020-08-24': 0, '2020-08-25': 0, '2020-08-26': 0, '2020-08-27': 0, '2020-08-28': 0, '2020-08-29': 0, '2020-08-30': 0, '2020-08-31': 0, '2020-09-01': 0, '2020-09-02': 0, '2020-09-03': 0, '2020-09-04': 0, '2020-09-05': 0, '2020-09-06': 0, '2020-09-07': 0, '2020-09-08': 0, '2020-09-09': 0, '2020-09-10': 0, '2020-09-11': 0, '2020-09-12': 0, '2020-09-13': 0, '2020-09-14': 0, '2020-09-15': 0, '2020-09-16': 0, '2020-09-17': 0, '2020-09-18': 0, '2020-09-19': 0, '2020-09-20': 0, '2020-09-21': 0, '2020-09-22': 0, '2020-09-23': 0, '2020-09-24': 0, '2020-09-25': 0, '2020-09-26': 0, '2020-09-27': 0, '2020-09-28': 0, '2020-09-29': 0, '2020-09-30': 0, '2020-10-01': 0, '2020-10-02': 0, '2020-10-03': 0, '2020-10-04': 0, '2020-10-05': 0, '2020-10-06': 0, '2020-10-07': 0, '2020-10-08': 0, '2020-10-09': 0, '2020-10-10': 0, '2020-10-11': 0, '2020-10-12': 0, '2020-10-13': 0, '2020-10-14': 0, '2020-10-15': 0, '2020-10-16': 0, '2020-10-17': 0, '2020-10-18': 0, '2020-10-19': 0, '2020-10-20': 0, '2020-10-21': 0, '2020-10-22': 0, '2020-10-23': 0, '2020-10-24': 0, '2020-10-25': 0, '2020-10-26': 0, '2020-10-27': 0, '2020-10-28': 0, '2020-10-29': 0, '2020-10-30': 0, '2020-10-31': 0, '2020-11-01': 0, '2020-11-02': 0, '2020-11-03': 0, '2020-11-04': 0, '2020-11-05': 0, '2020-11-06': 0, '2020-11-07': 0, '2020-11-08': 0, '2020-11-09': 0, '2020-11-10': 0, '2020-11-11': 0, '2020-11-12': 0, '2020-11-13': 0, '2020-11-14': 0, '2020-11-15': 0, '2020-11-16': 0, '2020-11-17': 0, '2020-11-18': 0, '2020-11-19': 0, '2020-11-20': 0, '2020-11-21': 0, '2020-11-22': 0, '2020-11-23': 0, '2020-11-24': 0, '2020-11-25': 0, '2020-11-26': 0, '2020-11-27': 0, '2020-11-28': 0, '2020-11-29': 0, '2020-11-30': 0, '2020-12-01': 0, '2020-12-02': 0, '2020-12-03': 0, '2020-12-04': 0, '2020-12-05': 0, '2020-12-06': 0, '2020-12-07': 0, '2020-12-08': 0, '2020-12-09': 0, '2020-12-10': 0, '2020-12-11': 0, '2020-12-12': 0, '2020-12-13': 0, '2020-12-14': 0, '2020-12-15': 0, '2020-12-16': 0, '2020-12-17': 0, '2020-12-18': 0, '2020-12-19': 0, '2020-12-20': 0, '2020-12-21': 0, '2020-12-22': 0, '2020-12-23': 0, '2020-12-24': 0, '2020-12-25': 0, '2020-12-26': 0, '2020-12-27': 0, '2020-12-28': 0, '2020-12-29': 0, '2020-12-30': 0, '2020-12-31': 0, '2021-01-01': 0, '2021-01-02': 0, '2021-01-03': 0, '2021-01-04': 0, '2021-01-05': 0, '2021-01-06': 0, '2021-01-07': 0, '2021-01-08': 0, '2021-01-09': 0, '2021-01-10': 0, '2021-01-11': 0, '2021-01-12': 0, '2021-01-13': 0, '2021-01-14': 0, '2021-01-15': 0, '2021-01-16': 0, '2021-01-17': 0, '2021-01-18': 0, '2021-01-19': 0, '2021-01-20': 0, '2021-01-21': 0, '2021-01-22': 0, '2021-01-23': 0, '2021-01-24': 0, '2021-01-25': 0, '2021-01-26': 0, '2021-01-27': 0, '2021-01-28': 0, '2021-01-29': 0, '2021-01-30': 0, '2021-01-31': 0, '2021-02-01': 0, '2021-02-02': 0, '2021-02-03': 0, '2021-02-04': 0, '2021-02-05': 0, '2021-02-06': 0, '2021-02-07': 0, '2021-02-08': 0, '2021-02-09': 0, '2021-02-10': 0, '2021-02-11': 0, '2021-02-12': 0, '2021-02-13': 0, '2021-02-14': 0, '2021-02-15': 0, '2021-02-16': 0, '2021-02-17': 0, '2021-02-18': 0, '2021-02-19': 0, '2021-02-20': 0, '2021-02-21': 0, '2021-02-22': 0, '2021-02-23': 0, '2021-02-24': 0, '2021-02-25': 0, '2021-02-26': 0, '2021-02-27': 0, '2021-02-28': 0, '2021-03-01': 0, '2021-03-02': 0, '2021-03-03': 0, '2021-03-04': 0, '2021-03-05': 0, '2021-03-06': 0, '2021-03-07': 0, '2021-03-08': 0, '2021-03-09': 0, '2021-03-10': 0, '2021-03-11': 0, '2021-03-12': 0, '2021-03-13': 0, '2021-03-14': 0, '2021-03-15': 0, '2021-03-16': 0, '2021-03-17': 0, '2021-03-18': 0, '2021-03-19': 0, '2021-03-20': 0, '2021-03-21': 0, '2021-03-22': 0, '2021-03-23': 0, '2021-03-24': 0, '2021-03-25': 0, '2021-03-26': 0, '2021-03-27': 0, '2021-03-28': 0, '2021-03-29': 0, '2021-03-30': 0, '2021-03-31': 0, '2021-04-01': 0, '2021-04-02': 0, '2021-04-03': 0, '2021-04-04': 0, '2021-04-05': 0, '2021-04-06': 0, '2021-04-07': 0, '2021-04-08': 0, '2021-04-09': 0, '2021-04-10': 0, '2021-04-11': 0, '2021-04-12': 0, '2021-04-13': 0, '2021-04-14': 0, '2021-04-15': 0, '2021-04-16': 0, '2021-04-17': 0, '2021-04-18': 0, '2021-04-19': 0, '2021-04-20': 0, '2021-04-21': 0, '2021-04-22': 0, '2021-04-23': 0, '2021-04-24': 0, '2021-04-25': 0, '2021-04-26': 0, '2021-04-27': 0, '2021-04-28': 0, '2021-04-29': 0, '2021-04-30': 0, '2021-05-01': 0, '2021-05-02': 0, '2021-05-03': 0, '2021-05-04': 0, '2021-05-05': 0, '2021-05-06': 0, '2021-05-07': 0, '2021-05-08': 0, '2021-05-09': 0, '2021-05-10': 0, '2021-05-11': 0, '2021-05-12': 0, '2021-05-13': 0, '2021-05-14': 0, '2021-05-15': 0, '2021-05-16': 0, '2021-05-17': 0, '2021-05-18': 0, '2021-05-19': 0, '2021-05-20': 0, '2021-05-21': 0, '2021-05-22': 0, '2021-05-23': 0, '2021-05-24': 0, '2021-05-25': 0, '2021-05-26': 0, '2021-05-27': 0, '2021-05-28': 0, '2021-05-29': 0, '2021-05-30': 0, '2021-05-31': 0, '2021-06-01': 0, '2021-06-02': 0, '2021-06-03': 0, '2021-06-04': 0, '2021-06-05': 0, '2021-06-06': 0, '2021-06-07': 0, '2021-06-08': 0, '2021-06-09': 0, '2021-06-10': 0, '2021-06-11': 0, '2021-06-12': 0, '2021-06-13': 0, '2021-06-14': 0, '2021-06-15': 0, '2021-06-16': 0, '2021-06-17': 0, '2021-06-18': 0, '2021-06-19': 0, '2021-06-20': 0, '2021-06-21': 0, '2021-06-22': 0, '2021-06-23': 0, '2021-06-24': 0, '2021-06-25': 0, '2021-06-26': 0, '2021-06-27': 0, '2021-06-28': 0, '2021-06-29': 0, '2021-06-30': 0, '2021-07-01': 0, '2021-07-02': 0, '2021-07-03': 0, '2021-07-04': 0, '2021-07-05': 0, '2021-07-06': 0, '2021-07-07': 0, '2021-07-08': 0, '2021-07-09': 0, '2021-07-10': 0, '2021-07-11': 0, '2021-07-12': 0, '2021-07-13': 0, '2021-07-14': 0, '2021-07-15': 0, '2021-07-16': 0, '2021-07-17': 0, '2021-07-18': 0, '2021-07-19': 0, '2021-07-20': 0, '2021-07-21': 0, '2021-07-22': 0, '2021-07-23': 0, '2021-07-24': 0, '2021-07-25': 0, '2021-07-26': 0, '2021-07-27': 0, '2021-07-28': 0, '2021-07-29': 0, '2021-07-30': 0, '2021-07-31': 0, '2021-08-01': 0, '2021-08-02': 0, '2021-08-03': 0, '2021-08-04': 0, '2021-08-05': 0, '2021-08-06': 0, '2021-08-07': 0, '2021-08-08': 0, '2021-08-09': 0, '2021-08-10': 0, '2021-08-11': 0, '2021-08-12': 0, '2021-08-13': 0, '2021-08-14': 0, '2021-08-15': 0, '2021-08-16': 0, '2021-08-17': 0, '2021-08-18': 0, '2021-08-19': 0, '2021-08-20': 0, '2021-08-21': 0, '2021-08-22': 0, '2021-08-23': 0, '2021-08-24': 0, '2021-08-25': 0, '2021-08-26': 0, '2021-08-27': 0, '2021-08-28': 0, '2021-08-29': 0, '2021-08-30': 0, '2021-08-31': 0, '2021-09-01': 0, '2021-09-02': 0, '2021-09-03': 0, '2021-09-04': 0, '2021-09-05': 0, '2021-09-06': 0, '2021-09-07': 0, '2021-09-08': 0, '2021-09-09': 0, '2021-09-10': 0, '2021-09-11': 0, '2021-09-12': 0, '2021-09-13': 0, '2021-09-14': 0, '2021-09-15': 0, '2021-09-16': 0, '2021-09-17': 0, '2021-09-18': 0, '2021-09-19': 0, '2021-09-20': 0, '2021-09-21': 0, '2021-09-22': 0, '2021-09-23': 0, '2021-09-24': 0, '2021-09-25': 0, '2021-09-26': 0, '2021-09-27': 0, '2021-09-28': 0, '2021-09-29': 0, '2021-09-30': 0, '2021-10-01': 0, '2021-10-02': 0, '2021-10-03': 0, '2021-10-04': 0, '2021-10-05': 0, '2021-10-06': 0, '2021-10-07': 0, '2021-10-08': 0, '2021-10-09': 0, '2021-10-10': 0, '2021-10-11': 0, '2021-10-12': 0, '2021-10-13': 0, '2021-10-14': 0, '2021-10-15': 0, '2021-10-16': 0, '2021-10-17': 0, '2021-10-18': 0, '2021-10-19': 0, '2021-10-20': 0, '2021-10-21': 0, '2021-10-22': 0, '2021-10-23': 0, '2021-10-24': 0, '2021-10-25': 0, '2021-10-26': 0, '2021-10-27': 0, '2021-10-28': 0, '2021-10-29': 0, '2021-10-30': 0, '2021-10-31': 0, '2021-11-01': 0, '2021-11-02': 0, '2021-11-03': 0, '2021-11-04': 0, '2021-11-05': 0, '2021-11-06': 0, '2021-11-07': 0, '2021-11-08': 0, '2021-11-09': 0, '2021-11-10': 0, '2021-11-11': 0, '2021-11-12': 0, '2021-11-13': 0, '2021-11-14': 0, '2021-11-15': 0, '2021-11-16': 0, '2021-11-17': 0, '2021-11-18': 0, '2021-11-19': 0, '2021-11-20': 0, '2021-11-21': 0, '2021-11-22': 0, '2021-11-23': 0, '2021-11-24': 0, '2021-11-25': 0, '2021-11-26': 0, '2021-11-27': 0, '2021-11-28': 0, '2021-11-29': 0, '2021-11-30': 0, '2021-12-01': 0, '2021-12-02': 0, '2021-12-03': 0, '2021-12-04': 0, '2021-12-05': 0, '2021-12-06': 0, '2021-12-07': 0, '2021-12-08': 0, '2021-12-09': 0, '2021-12-10': 0, '2021-12-11': 0, '2021-12-12': 0, '2021-12-13': 0, '2021-12-14': 0, '2021-12-15': 0, '2021-12-16': 0, '2021-12-17': 0, '2021-12-18': 0, '2021-12-19': 0, '2021-12-20': 0, '2021-12-21': 0, '2021-12-22': 0, '2021-12-23': 0, '2021-12-24': 0, '2021-12-25': 0, '2021-12-26': 0, '2021-12-27': 0, '2021-12-28': 0, '2021-12-29': 0, '2021-12-30': 0, '2021-12-31': 0, '2022-01-01': 0, '2022-01-02': 0, '2022-01-03': 0, '2022-01-04': 0, '2022-01-05': 0, '2022-01-06': 0, '2022-01-07': 0, '2022-01-08': 0, '2022-01-09': 0, '2022-01-10': 0, '2022-01-11': 0, '2022-01-12': 0, '2022-01-13': 0, '2022-01-14': 0, '2022-01-15': 0, '2022-01-16': 0, '2022-01-17': 0, '2022-01-18': 0, '2022-01-19': 0, '2022-01-20': 0, '2022-01-21': 0, '2022-01-22': 0, '2022-01-23': 0, '2022-01-24': 0, '2022-01-25': 0, '2022-01-26': 0, '2022-01-27': 0, '2022-01-28': 0, '2022-01-29': 0, '2022-01-30': 0, '2022-01-31': 0, '2022-02-01': 0, '2022-02-02': 0, '2022-02-03': 0, '2022-02-04': 0, '2022-02-05': 0, '2022-02-06': 0, '2022-02-07': 0, '2022-02-08': 0, '2022-02-09': 0, '2022-02-10': 0, '2022-02-11': 0, '2022-02-12': 0, '2022-02-13': 0, '2022-02-14': 0, '2022-02-15': 0, '2022-02-16': 0, '2022-02-17': 0, '2022-02-18': 0, '2022-02-19': 0, '2022-02-20': 0, '2022-02-21': 0, '2022-02-22': 0, '2022-02-23': 0, '2022-02-24': 0, '2022-02-25': 0, '2022-02-26': 0, '2022-02-27': 0, '2022-02-28': 0, '2022-03-01': 0, '2022-03-02': 0, '2022-03-03': 0, '2022-03-04': 0, '2022-03-05': 0, '2022-03-06': 0, '2022-03-07': 0, '2022-03-08': 0, '2022-03-09': 0, '2022-03-10': 0, '2022-03-11': 0, '2022-03-12': 0, '2022-03-13': 0, '2022-03-14': 0, '2022-03-15': 0, '2022-03-16': 0, '2022-03-17': 0, '2022-03-18': 0, '2022-03-19': 0, '2022-03-20': 0, '2022-03-21': 0, '2022-03-22': 0, '2022-03-23': 0, '2022-03-24': 0, '2022-03-25': 0, '2022-03-26': 0, '2022-03-27': 0, '2022-03-28': 0, '2022-03-29': 0, '2022-03-30': 0, '2022-03-31': 0, '2022-04-01': 0, '2022-04-02': 0, '2022-04-03': 0, '2022-04-04': 0, '2022-04-05': 0, '2022-04-06': 0, '2022-04-07': 0, '2022-04-08': 0, '2022-04-09': 0, '2022-04-10': 0, '2022-04-11': 0, '2022-04-12': 0, '2022-04-13': 0, '2022-04-14': 0, '2022-04-15': 0, '2022-04-16': 0, '2022-04-17': 0, '2022-04-18': 0, '2022-04-19': 0, '2022-04-20': 0, '2022-04-21': 0, '2022-04-22': 0, '2022-04-23': 0, '2022-04-24': 0, '2022-04-25': 0, '2022-04-26': 0, '2022-04-27': 0, '2022-04-28': 0, '2022-04-29': 0, '2022-04-30': 0, '2022-05-01': 0, '2022-05-02': 0, '2022-05-03': 0, '2022-05-04': 0, '2022-05-05': 0, '2022-05-06': 0, '2022-05-07': 0, '2022-05-08': 0, '2022-05-09': 0, '2022-05-10': 0, '2022-05-11': 0, '2022-05-12': 0, '2022-05-13': 0, '2022-05-14': 0, '2022-05-15': 0, '2022-05-16': 0, '2022-05-17': 0, '2022-05-18': 0, '2022-05-19': 0, '2022-05-20': 0, '2022-05-21': 0, '2022-05-22': 0, '2022-05-23': 0, '2022-05-24': 0, '2022-05-25': 0, '2022-05-26': 0, '2022-05-27': 0, '2022-05-28': 0, '2022-05-29': 0, '2022-05-30': 0, '2022-05-31': 0, '2022-06-01': 0, '2022-06-02': 0, '2022-06-03': 0, '2022-06-04': 0, '2022-06-05': 0, '2022-06-06': 0, '2022-06-07': 0, '2022-06-08': 0, '2022-06-09': 0, '2022-06-10': 0, '2022-06-11': 0, '2022-06-12': 0, '2022-06-13': 0, '2022-06-14': 0, '2022-06-15': 0, '2022-06-16': 0, '2022-06-17': 0, '2022-06-18': 0, '2022-06-19': 0, '2022-06-20': 0, '2022-06-21': 0, '2022-06-22': 0, '2022-06-23': 0, '2022-06-24': 0, '2022-06-25': 0, '2022-06-26': 0, '2022-06-27': 0, '2022-06-28': 0, '2022-06-29': 0, '2022-06-30': 0, '2022-07-01': 0, '2022-07-02': 0, '2022-07-03': 0, '2022-07-04': 0, '2022-07-05': 0, '2022-07-06': 0, '2022-07-07': 0, '2022-07-08': 0, '2022-07-09': 0, '2022-07-10': 0, '2022-07-11': 0, '2022-07-12': 0, '2022-07-13': 0, '2022-07-14': 0, '2022-07-15': 0, '2022-07-16': 0, '2022-07-17': 0, '2022-07-18': 0, '2022-07-19': 0, '2022-07-20': 0, '2022-07-21': 0, '2022-07-22': 0, '2022-07-23': 0, '2022-07-24': 0, '2022-07-25': 0, '2022-07-26': 0, '2022-07-27': 0, '2022-07-28': 0, '2022-07-29': 0, '2022-07-30': 0, '2022-07-31': 0, '2022-08-01': 0, '2022-08-02': 0, '2022-08-03': 0, '2022-08-04': 0, '2022-08-05': 0, '2022-08-06': 0, '2022-08-07': 0, '2022-08-08': 0, '2022-08-09': 0, '2022-08-10': 0, '2022-08-11': 0, '2022-08-12': 0, '2022-08-13': 0, '2022-08-14': 0, '2022-08-15': 0, '2022-08-16': 0, '2022-08-17': 0, '2022-08-18': 0, '2022-08-19': 0, '2022-08-20': 0, '2022-08-21': 0, '2022-08-22': 0, '2022-08-23': 0, '2022-08-24': 0, '2022-08-25': 0, '2022-08-26': 0, '2022-08-27': 0, '2022-08-28': 0, '2022-08-29': 0, '2022-08-30': 0, '2022-08-31': 0, '2022-09-01': 0, '2022-09-02': 0, '2022-09-03': 0, '2022-09-04': 0, '2022-09-05': 0, '2022-09-06': 0, '2022-09-07': 0, '2022-09-08': 0, '2022-09-09': 0, '2022-09-10': 0, '2022-09-11': 0, '2022-09-12': 0, '2022-09-13': 0, '2022-09-14': 0, '2022-09-15': 0, '2022-09-16': 0, '2022-09-17': 0, '2022-09-18': 0, '2022-09-19': 0, '2022-09-20': 0, '2022-09-21': 0, '2022-09-22': 0, '2022-09-23': 0, '2022-09-24': 0, '2022-09-25': 0, '2022-09-26': 0, '2022-09-27': 0, '2022-09-28': 0, '2022-09-29': 0, '2022-09-30': 0, '2022-10-01': 0, '2022-10-02': 0, '2022-10-03': 0, '2022-10-04': 0, '2022-10-05': 0, '2022-10-06': 0, '2022-10-07': 0, '2022-10-08': 0, '2022-10-09': 0, '2022-10-10': 0, '2022-10-11': 0, '2022-10-12': 0, '2022-10-13': 0, '2022-10-14': 0, '2022-10-15': 0, '2022-10-16': 0, '2022-10-17': 0, '2022-10-18': 0, '2022-10-19': 0, '2022-10-20': 0, '2022-10-21': 0, '2022-10-22': 0, '2022-10-23': 0, '2022-10-24': 0, '2022-10-25': 0, '2022-10-26': 0, '2022-10-27': 0, '2022-10-28': 0, '2022-10-29': 0, '2022-10-30': 0, '2022-10-31': 0, '2022-11-01': 0, '2022-11-02': 0, '2022-11-03': 0, '2022-11-04': 0, '2022-11-05': 0, '2022-11-06': 0, '2022-11-07': 0, '2022-11-08': 0, '2022-11-09': 0, '2022-11-10': 0, '2022-11-11': 0, '2022-11-12': 0, '2022-11-13': 0, '2022-11-14': 0, '2022-11-15': 0, '2022-11-16': 0, '2022-11-17': 0, '2022-11-18': 0, '2022-11-19': 0, '2022-11-20': 0, '2022-11-21': 0, '2022-11-22': 0, '2022-11-23': 0, '2022-11-24': 0, '2022-11-25': 0, '2022-11-26': 0, '2022-11-27': 0, '2022-11-28': 0, '2022-11-29': 0, '2022-11-30': 0, '2022-12-01': 0, '2022-12-02': 0, '2022-12-03': 0, '2022-12-04': 0, '2022-12-05': 0, '2022-12-06': 0, '2022-12-07': 0, '2022-12-08': 0, '2022-12-09': 0, '2022-12-10': 0, '2022-12-11': 0, '2022-12-12': 0, '2022-12-13': 0, '2022-12-14': 0, '2022-12-15': 0, '2022-12-16': 0, '2022-12-17': 0, '2022-12-18': 0, '2022-12-19': 0, '2022-12-20': 0, '2022-12-21': 0, '2022-12-22': 0, '2022-12-23': 0, '2022-12-24': 0, '2022-12-25': 0, '2022-12-26': 0, '2022-12-27': 0, '2022-12-28': 0, '2022-12-29': 0, '2022-12-30': 0, '2022-12-31': 0, '2023-01-01': 0, '2023-01-02': 0, '2023-01-03': 0, '2023-01-04': 0, '2023-01-05': 0, '2023-01-06': 0, '2023-01-07': 0, '2023-01-08': 0, '2023-01-09': 0, '2023-01-10': 0, '2023-01-11': 0, '2023-01-12': 0, '2023-01-13': 0, '2023-01-14': 0, '2023-01-15': 0, '2023-01-16': 0, '2023-01-17': 0, '2023-01-18': 0, '2023-01-19': 0, '2023-01-20': 0, '2023-01-21': 0, '2023-01-22': 0, '2023-01-23': 0, '2023-01-24': 0, '2023-01-25': 0, '2023-01-26': 0, '2023-01-27': 0, '2023-01-28': 0, '2023-01-29': 0, '2023-01-30': 0, '2023-01-31': 0, '2023-02-01': 0, '2023-02-02': 0, '2023-02-03': 0, '2023-02-04': 0, '2023-02-05': 0, '2023-02-06': 0, '2023-02-07': 0, '2023-02-08': 0, '2023-02-09': 0, '2023-02-10': 0, '2023-02-11': 0, '2023-02-12': 0, '2023-02-13': 0, '2023-02-14': 0, '2023-02-15': 0, '2023-02-16': 0, '2023-02-17': 0, '2023-02-18': 0, '2023-02-19': 0, '2023-02-20': 0, '2023-02-21': 0, '2023-02-22': 0, '2023-02-23': 0, '2023-02-24': 0, '2023-02-25': 0, '2023-02-26': 0, '2023-02-27': 0, '2023-02-28': 0, '2023-03-01': 0, '2023-03-02': 0, '2023-03-03': 0, '2023-03-04': 0, '2023-03-05': 0, '2023-03-06': 0, '2023-03-07': 0, '2023-03-08': 0, '2023-03-09': 0, '2023-03-10': 0, '2023-03-11': 0, '2023-03-12': 0, '2023-03-13': 0, '2023-03-14': 0, '2023-03-15': 0, '2023-03-16': 0, '2023-03-17': 0, '2023-03-18': 0, '2023-03-19': 0, '2023-03-20': 0, '2023-03-21': 0, '2023-03-22': 0, '2023-03-23': 0, '2023-03-24': 0, '2023-03-25': 0, '2023-03-26': 0, '2023-03-27': 0, '2023-03-28': 0, '2023-03-29': 0, '2023-03-30': 0, '2023-03-31': 0, '2023-04-01': 0, '2023-04-02': 0, '2023-04-03': 0, '2023-04-04': 0, '2023-04-05': 0, '2023-04-06': 0, '2023-04-07': 0, '2023-04-08': 0, '2023-04-09': 0, '2023-04-10': 0, '2023-04-11': 0, '2023-04-12': 0, '2023-04-13': 0, '2023-04-14': 0, '2023-04-15': 0, '2023-04-16': 0, '2023-04-17': 0, '2023-04-18': 0, '2023-04-19': 0, '2023-04-20': 0, '2023-04-21': 0, '2023-04-22': 0, '2023-04-23': 0, '2023-04-24': 0, '2023-04-25': 0, '2023-04-26': 0, '2023-04-27': 0, '2023-04-28': 0, '2023-04-29': 0, '2023-04-30': 0, '2023-05-01': 0, '2023-05-02': 0, '2023-05-03': 0, '2023-05-04': 0, '2023-05-05': 0, '2023-05-06': 0, '2023-05-07': 0, '2023-05-08': 0, '2023-05-09': 0, '2023-05-10': 0, '2023-05-11': 0, '2023-05-12': 0, '2023-05-13': 0, '2023-05-14': 0, '2023-05-15': 0, '2023-05-16': 0, '2023-05-17': 0, '2023-05-18': 0, '2023-05-19': 0, '2023-05-20': 0, '2023-05-21': 0, '2023-05-22': 0, '2023-05-23': 0, '2023-05-24': 0, '2023-05-25': 0, '2023-05-26': 0, '2023-05-27': 0, '2023-05-28': 0, '2023-05-29': 0, '2023-05-30': 0, '2023-05-31': 0, '2023-06-01': 0, '2023-06-02': 0, '2023-06-03': 0, '2023-06-04': 0, '2023-06-05': 0, '2023-06-06': 0, '2023-06-07': 0, '2023-06-08': 0, '2023-06-09': 0, '2023-06-10': 0, '2023-06-11': 0, '2023-06-12': 0, '2023-06-13': 0, '2023-06-14': 0, '2023-06-15': 0, '2023-06-16': 0, '2023-06-17': 0, '2023-06-18': 0, '2023-06-19': 0, '2023-06-20': 0, '2023-06-21': 0, '2023-06-22': 0, '2023-06-23': 0, '2023-06-24': 0, '2023-06-25': 0, '2023-06-26': 0, '2023-06-27': 0, '2023-06-28': 0, '2023-06-29': 0, '2023-06-30': 0, '2023-07-01': 0, '2023-07-02': 0, '2023-07-03': 0, '2023-07-04': 0, '2023-07-05': 0, '2023-07-06': 0, '2023-07-07': 0, '2023-07-08': 0, '2023-07-09': 0, '2023-07-10': 0, '2023-07-11': 0, '2023-07-12': 0, '2023-07-13': 0, '2023-07-14': 0, '2023-07-15': 0, '2023-07-16': 0, '2023-07-17': 0, '2023-07-18': 0, '2023-07-19': 0, '2023-07-20': 0, '2023-07-21': 0, '2023-07-22': 0, '2023-07-23': 0, '2023-07-24': 0, '2023-07-25': 0, '2023-07-26': 0, '2023-07-27': 0, '2023-07-28': 0, '2023-07-29': 0, '2023-07-30': 0, '2023-07-31': 0, '2023-08-01': 0, '2023-08-02': 0, '2023-08-03': 0, '2023-08-04': 0, '2023-08-05': 0, '2023-08-06': 0, '2023-08-07': 0, '2023-08-08': 0, '2023-08-09': 0, '2023-08-10': 0, '2023-08-11': 0, '2023-08-12': 0, '2023-08-13': 0, '2023-08-14': 0, '2023-08-15': 0, '2023-08-16': 0, '2023-08-17': 0, '2023-08-18': 0, '2023-08-19': 0, '2023-08-20': 0.010415433333333333, '2023-08-21': 0.26678841666666664, '2023-08-22': 0.018874716666666666, '2023-08-23': 0.02315135, '2023-08-24': 0.017465783333333332, '2023-08-25': 0.014494383333333333, '2023-08-26': 0.019779583333333333, '2023-08-27': 0.07181573333333333, '2023-08-28': 0.00818255, '2023-08-29': 0.03693651666666667, '2023-08-30': 0.23328651666666667, '2023-08-31': 0.2670204333333333, '2023-09-01': 0.6364638666666667, '2023-09-02': 0.6275184, '2023-09-03': 0.24356333333333333, '2023-09-04': 0.38842873333333333, '2023-09-05': 0.15264755, '2023-09-06': 0.12960806666666666, '2023-09-07': 0.30747538333333335, '2023-09-08': 0.7294953666666667, '2023-09-09': 0.20231363333333333, '2023-09-10': 0.44146304999999997, '2023-09-11': 0.33240495, '2023-09-12': 0.20160421666666667, '2023-09-13': 0.30264596666666665, '2023-09-14': 0.3292198333333333, '2023-09-15': 0.2519885, '2023-09-16': 0.23058673333333332, '2023-09-17': 0.1305537, '2023-09-18': 0.07338038333333333, '2023-09-19': 0.4826415333333333, '2023-09-20': 0.40494363333333333, '2023-09-21': 0.09262, '2023-09-22': 0.010439433333333333, '2023-09-23': 0.11021658333333333, '2023-09-24': 0.6394544166666667, '2023-09-25': 0.24308886666666665, '2023-09-26': 0.4861986833333333, '2023-09-27': 0.4118482333333333, '2023-09-28': 0.0907859, '2023-09-29': 0.12945146666666665, '2023-09-30': 0.8527856666666667, '2023-10-01': 0.5897198833333334, '2023-10-02': 0.7901677833333334, '2023-10-03': 0.6951457666666666, '2023-10-04': 0.8532217333333333, '2023-10-05': 0.26097421666666665, '2023-10-06': 0.13146005, '2023-10-07': 0.35865251666666664, '2023-10-08': 0.0, '2023-10-09': 0.0, '2023-10-10': 0.0, '2023-10-11': 0.0, '2023-10-12': 0.0, '2023-10-13': 0.0, '2023-10-14': 0.0, '2023-10-15': 0.0, '2023-10-16': 0.0, '2023-10-17': 0.0, '2023-10-18': 0.0, '2023-10-19': 0.0, '2023-10-20': 0.0020536499999999997, '2023-10-21': 0.4362985, '2023-10-22': 0.33080113333333333, '2023-10-23': 0.40425801666666666, '2023-10-24': 0.19112315, '2023-10-25': 0.32551765, '2023-10-26': 0.018975766666666668, '2023-10-27': 0.41160365, '2023-10-28': 0.09990008333333333, '2023-10-29': 0.014912566666666667, '2023-10-30': 0.3775105833333333, '2023-10-31': 0.25254591666666665, '2023-11-01': 0.12053681666666666, '2023-11-02': 0.4935576666666667, '2023-11-03': 0.28652125, '2023-11-04': 0.06165065, '2023-11-05': 0.19232156666666667, '2023-11-06': 0.7443963333333333, '2023-11-07': 0.2825918, '2023-11-08': 0.16331916666666665, '2023-11-09': 0.5431144, '2023-11-10': 0.25829705, '2023-11-11': 0.38848536666666666, '2023-11-12': 0.46093046666666665, '2023-11-13': 0.1889399, '2023-11-14': 0.14976268333333334, '2023-11-15': 0.013248016666666666, '2023-11-16': 0.21429014999999998, '2023-11-17': 0.17337708333333332, '2023-11-18': 0.15416126666666666, '2023-11-19': 0.26652235, '2023-11-20': 0.7071798333333333, '2023-11-21': 1.03053935, '2023-11-22': 0.9716939, '2023-11-23': 0.8610595166666667, '2023-11-24': 0.45652834999999997, '2023-11-25': 1.0056747, '2023-11-26': 0.053117866666666666, '2023-11-27': 0.6207655333333333, '2023-11-28': 0.13692986666666665, '2023-11-29': 0.5597466833333332, '2023-11-30': 0.6332760333333334, '2023-12-01': 0.9456909833333342, '2023-12-02': 0.9213082999999992, '2023-12-03': 0.7769276000000007, '2023-12-04': 0.8810746999999985, '2023-12-05': 0.8498278666666669, '2023-12-06': 0.67340445, '2023-12-07': 0.7678992166666662, '2023-12-08': 0.7682337333333328, '2023-12-09': 0.8688507666666664, '2023-12-10': 0.9151108166666668, '2023-12-11': 1.5712971500000013, '2023-12-12': 0, '2023-12-13': 0, '2023-12-14': 0, '2023-12-15': 0, '2023-12-16': 0, '2023-12-17': 0, '2023-12-18': 0, '2023-12-19': 0, '2023-12-20': 0, '2023-12-21': 0, '2023-12-22': 0, '2023-12-23': 0, '2023-12-24': 0, '2023-12-25': 0, '2023-12-26': 0, '2023-12-27': 0, '2023-12-28': 0, '2023-12-29': 0, '2023-12-30': 0, '2023-12-31': 0}

@freeze_time("2023-12-11")  # Freeze time to a specific date for testing
def test_convert_to_yearly_energy_format_with_valid_data(valid_yearly_energy_data):
    result = convert_to_yearly_energy_format(valid_yearly_energy_data)
    expected_result = [
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.9882114166666667,
                9.665836083333335,
                6.544842616666665,
                12.192535616666664,
                9.939625583333333
            ],
            "label": [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec"
            ],
            "title": "Year 2023"
        },
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "label": [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec"
            ],
            "title": "Year 2022"
        },
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "label": [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec"
            ],
            "title": "Year 2021"
        },
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "label": [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec"
            ],
            "title": "Year 2020"
        },
        {
            "energy": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "label": [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec"
            ],
            "title": "Year 2019"
        }
    ]
    assert result == expected_result
    
    
def test_empty_input():
    result = convert_to_yearly_energy_format({})
    assert result == []
    
@freeze_time("2023-12-11")  # Freeze time to a specific date for testing
def test_convert_to_yearly_energy_format_with_invalid_data(valid_yearly_energy_data):
    invalid_date_format_energy_data = valid_yearly_energy_data.copy()
    invalid_date_format_energy_data['invalid_date'] = {'2023----01': 0}

    with pytest.raises(ValueError):
        convert_to_yearly_energy_format(invalid_date_format_energy_data)
# _________________________________________

@pytest.fixture(scope='session')
def setup_teardown_mongo_connection(request):
    # Establish a connection
    mongoengine.connect(db='flask_test_database', host='mongodb+srv://219410523:Maya2001@hems.kcuurlg.mongodb.net/flask_test_database')

    # Define a teardown function to disconnect after the test session
    def teardown():
        mongoengine.disconnect()

    # Register the teardown function
    request.addfinalizer(teardown)

    return mongoengine.connection.get_connection()

# Create Flask app and push context
app = Flask(__name__)
app.config['DEBUG'] = True  # Set DEBUG mode
app.app_context().push()


# Fixture to create a user and an appliance
@pytest.fixture
def create_user_and_appliance(setup_teardown_mongo_connection):
    user = User(email="test@example.com", password="password", cloud_password="cloud_password")
    user.save()
    appliance = Appliance(name="Test Appliance", type=ApplianceType.COOLER, cloud_id="12345")
    user.appliances.append(appliance)
    user.save()
    return user.id, appliance._id


# Valid user and appliance ID
def test_get_appliance_daily_energy_valid_ids(create_user_and_appliance,setup_teardown_mongo_connection):
    user_id, appliance_id = create_user_and_appliance
    with app.app_context():
        response = get_appliance_daily_energy(user_id, str(appliance_id))
    assert response.status_code == 200


# Invalid user ID
def test_get_appliance_daily_energy_invalid_user_id(setup_teardown_mongo_connection):
    response = get_appliance_daily_energy(str(ObjectId()), "valid_appliance_id")
    assert response.status_code == 404


# Invalid appliance ID
def test_get_appliance_daily_energy_invalid_appliance_id(create_user_and_appliance,setup_teardown_mongo_connection):
    user_id, _ = create_user_and_appliance
    with app.app_context():
        response = get_appliance_daily_energy(user_id, str(ObjectId()))
    assert response.status_code == 404

# Deleted Appliance
def test_get_appliance_daily_energy_deleted_appliance(create_user_and_appliance,setup_teardown_mongo_connection):
    user_id, appliance_id = create_user_and_appliance
    user = User.objects.get(id=user_id)
    user.appliances[0].is_deleted = True
    user.save()
    response = get_appliance_daily_energy(user_id, str(appliance_id))
    assert response.status_code == 404
# _____________________________________________________________________

# Fixture to create a user, a room, and appliances associated with the room
@pytest.fixture
def create_user_room_appliances(setup_teardown_mongo_connection):
    user = User(email="test@example.com", password="password", cloud_password="cloud_password")
    user.save()

    # Create appliances associated with the room
    appliance1 = Appliance(name="Appliance1", type=ApplianceType.CAMERA, cloud_id="some_cloud_id", energy=0.0, is_deleted=False)
    appliance2 = Appliance(name="Appliance2", type=ApplianceType.CHARGER, cloud_id="another_cloud_id", energy=0.0, is_deleted=False)

    user.appliances.extend([appliance1, appliance2])
    user.save()

    # Create a room
    room = Room(name="Test Room", user_id=user.id, appliances=[appliance1._id, appliance2._id])
    room.save()

    return user.id, room.id
# Fixture to create a user and a deleted room
@pytest.fixture
def create_user_deleted_room(setup_teardown_mongo_connection):
    user = User(email="test@example.com", password="password", cloud_password="cloud_password")
    user.save()

    deleted_room = Room(name="Deleted Room", user_id=user.id, appliances=[])
    deleted_room.save()
    
    deleted_room.delete()
    

    return user.id, deleted_room.id


def test_get_room_daily_energy_valid_ids(create_user_room_appliances,setup_teardown_mongo_connection):
    user_id, room_id = create_user_room_appliances
    with app.app_context():
        response = get_room_daily_energy(user_id, str(room_id))
    assert response.status_code == 200

def test_get_room_daily_energy_invalid_user_id(create_user_room_appliances,setup_teardown_mongo_connection):
    with app.app_context():
        _, room_id = create_user_room_appliances
        response = get_room_daily_energy(str(ObjectId()), room_id)
    assert response.status_code == 404

def test_get_room_daily_energy_invalid_room_id(create_user_room_appliances,setup_teardown_mongo_connection):
    user_id, _ = create_user_room_appliances
    with app.app_context():
        response = get_room_daily_energy(user_id, str(ObjectId()))
    assert response.status_code == 404

def test_get_room_daily_energy_deleted_room(create_user_deleted_room,setup_teardown_mongo_connection):
    user_id, deleted_room_id = create_user_deleted_room
    with app.app_context():
        response = get_room_daily_energy(user_id, str(deleted_room_id))
    assert response.status_code == 404
    
# __________________________________________

# Fixture to create a user and appliances
@pytest.fixture
def create_user_with_appliances(setup_teardown_mongo_connection):
    user = User(email="test@example.com", password="password", cloud_password="cloud_password")
    user.save()

    # Create appliances
    appliance1 = Appliance(name="Appliance1", energy=50.0, is_deleted=False)
    appliance2 = Appliance(name="Appliance2", energy=30.0, is_deleted=False)

    user.appliances.extend([appliance1, appliance2])
    user.save()

    return user.id


# Fixture to create a user with no appliances
@pytest.fixture
def create_user_with_no_appliances(setup_teardown_mongo_connection):
    user = User(email="test_no_apps@example.com", password="password", cloud_password="cloud_password")
    user.save()

    return user.id

# Fixture to create a user with deleted appliances
@pytest.fixture
def create_user_with_deleted_appliances(setup_teardown_mongo_connection):
    user = User(email="test_with_deleted_apps@example.com", password="password", cloud_password="cloud_password")
    user.save()

    # Create deleted appliances
    deleted_appliance1 = Appliance(name="DeletedAppliance1", energy=20.0, is_deleted=True)
    deleted_appliance2 = Appliance(name="DeletedAppliance2", energy=10.0, is_deleted=True)

    user.appliances.extend([deleted_appliance1, deleted_appliance2])
    user.save()

    return user.id

def test_get_total_daily_energy_valid_user_id(create_user_with_appliances,setup_teardown_mongo_connection):
    user_id = create_user_with_appliances
    with app.app_context():
        response = get_total_daily_energy(user_id)
    assert response.status_code == 200
    assert response.json == 80.0  # 50.0 + 30.0



def test_get_total_daily_energy_invalid_user_id(setup_teardown_mongo_connection):
    with app.app_context():
        response = get_total_daily_energy(str(ObjectId()))
    assert response.status_code == 404

def test_get_total_daily_energy_deleted_appliances(create_user_with_deleted_appliances,setup_teardown_mongo_connection):
    user_id = create_user_with_deleted_appliances
    with app.app_context():
        response = get_total_daily_energy(user_id)
    assert response.json == 0.0
    assert response.status_code == 200

def test_get_total_daily_energy_no_appliances(create_user_with_no_appliances,setup_teardown_mongo_connection):
    user_id = create_user_with_no_appliances
    with app.app_context():
        response = get_total_daily_energy(user_id)
    assert response.json == 0.0
    assert response.status_code == 200
# ___________________________________________________________

@pytest.fixture
def create_user_and_appliance(setup_teardown_mongo_connection):
    user = User(email="test@example.com", password="password", cloud_password="cloud_password")
    user.save()
    appliance = Appliance(name="Test Appliance", energy=10.0, is_deleted=False)
    user.appliances.append(appliance)
    user.save()
    return user.id, appliance._id

@pytest.fixture
def create_user(setup_teardown_mongo_connection):
    user = User(email="test@example.com", password="password", cloud_password="cloud_password")
    user.save()
    return user.id

@pytest.fixture
def create_user_with_deleted_appliance(setup_teardown_mongo_connection):
    user = User(email="test@example.com", password="password", cloud_password="cloud_password")
    user.save()
    appliance = Appliance(name="Deleted Appliance", energy=5.0, is_deleted=True)
    user.appliances.append(appliance)
    user.save()
    return user.id, appliance._id

def test_get_appliance_weekly_energy_valid_ids(create_user_and_appliance,setup_teardown_mongo_connection):
    user_id, appliance_id = create_user_and_appliance
    with app.app_context():
        response = get_appliance_weekly_energy(user_id, str(appliance_id))
    assert response.status_code == 200
    assert 'appliance_id' in response.json
    assert 'weekly_energy_data' in response.json

def test_get_appliance_weekly_energy_invalid_user_id(setup_teardown_mongo_connection):
    response = get_appliance_weekly_energy(str(ObjectId()), "valid_appliance_id")
    assert response.status_code == 404

def test_get_appliance_weekly_energy_invalid_appliance_id(create_user,setup_teardown_mongo_connection):
    user_id = create_user
    with app.app_context():
        response = get_appliance_weekly_energy(user_id, str(ObjectId()))
    assert response.status_code == 404

def test_get_appliance_weekly_energy_deleted_appliance(create_user_with_deleted_appliance,setup_teardown_mongo_connection):
    user_id, appliance_id = create_user_with_deleted_appliance
    with app.app_context():
        response = get_appliance_weekly_energy(user_id, str(appliance_id))
    assert response.status_code == 404
# ___________________________________________________________

@pytest.fixture
def create_user_and_room(setup_teardown_mongo_connection):
    user = User(email="test@example.com", password="password", cloud_password="cloud_password")
    user.save()
    
    # Create appliances associated with the room
    appliance1 = Appliance(name="Appliance1", type=ApplianceType.CAMERA, cloud_id="some_cloud_id", energy=0.0, is_deleted=False)
    appliance2 = Appliance(name="Appliance2", type=ApplianceType.CHARGER, cloud_id="another_cloud_id", energy=0.0, is_deleted=False)

    user.appliances.extend([appliance1, appliance2])
    user.save()

    # Create a room
    room = Room(name="Test Room", user_id=user.id, appliances=[appliance1._id, appliance2._id])
    room.save()
    return user.id, room.id

@pytest.fixture
def create_user(setup_teardown_mongo_connection):
    user = User(email="test@example.com", password="password", cloud_password="cloud_password")
    user.save()
    return user.id

@pytest.fixture
def create_user_with_deleted_room(setup_teardown_mongo_connection):
    user = User(email="test@example.com", password="password", cloud_password="cloud_password")
    user.save()
    
    deleted_room = Room(name="Deleted Room", user_id=user.id, appliances=[])
    deleted_room.save()
    deleted_room.delete()
    return user.id, deleted_room.id

def test_get_room_weekly_energy_valid_ids(create_user_and_room,setup_teardown_mongo_connection):
    user_id, room_id = create_user_and_room
    with app.app_context():
        response = get_room_weekly_energy(user_id, room_id)
    assert response.status_code == 200
    assert 'room_id' in response.json
    assert 'weekly_energy_data' in response.json

def test_get_room_weekly_energy_invalid_user_id(create_user_and_room,setup_teardown_mongo_connection):
    user_id, room_id = create_user_and_room
    response = get_room_weekly_energy(str(ObjectId()), room_id)
    assert response.status_code == 404

def test_get_room_weekly_energy_invalid_room_id(create_user,setup_teardown_mongo_connection):
    user_id = create_user
    with app.app_context():
        response = get_room_weekly_energy(user_id, str(ObjectId()))
    assert response.status_code == 404

def test_get_room_weekly_energy_deleted_room(create_user_with_deleted_room,setup_teardown_mongo_connection):
    user_id, room_id = create_user_with_deleted_room
    with app.app_context():
        response = get_room_weekly_energy(user_id, room_id)
    assert response.status_code == 404
# ______________________________________________________________






def test_get_total_weekly_energy_valid_user_id(create_user_with_appliances,setup_teardown_mongo_connection):
    user_id = create_user_with_appliances
    with app.app_context():
        response = get_total_weekly_energy(user_id)
    assert response.status_code == 200
    data = json.loads(response.get_data(as_text=True))
    assert 'appliancesEnergy' in data[0]
    assert 'title' in data[0]

def test_get_total_weekly_energy_invalid_user_id(setup_teardown_mongo_connection):
    with app.app_context():
        response = get_total_weekly_energy(str(ObjectId()))
    assert response.status_code == 404

def test_get_total_weekly_energy_deleted_appliances(create_user_with_deleted_appliances,setup_teardown_mongo_connection):
    user_id = create_user_with_deleted_appliances
    with app.app_context():
        response = get_total_weekly_energy(user_id)
    assert response.status_code == 200
    data = json.loads(response.get_data(as_text=True))
    assert 'appliancesEnergy' in data[0]
    assert data and all('appliancesEnergy' in entry and isinstance(entry['appliancesEnergy'], list) and all(isinstance(appliance, dict) and 'energy' in appliance and 'name' in appliance for appliance in entry['appliancesEnergy']) for entry in data)
    assert 'title' in data[0]

def test_get_total_weekly_energy_no_appliances(create_user_with_no_appliances,setup_teardown_mongo_connection):
    user_id = create_user_with_no_appliances
    with app.app_context():
        response = get_total_weekly_energy(user_id)
    assert response.status_code == 200
    data = json.loads(response.get_data(as_text=True))
    assert 'appliancesEnergy' in data[0]
    assert data and all('appliancesEnergy' in entry and isinstance(entry['appliancesEnergy'], list) and all(isinstance(appliance, dict) and 'energy' in appliance and 'name' in appliance for appliance in entry['appliancesEnergy']) for entry in data)
    assert 'title' in data[0]
# ____________________________________________________


# Test cases
def test_get_appliance_monthly_energy_valid_ids(create_user_and_appliance,setup_teardown_mongo_connection):
    user_id, appliance_id = create_user_and_appliance
    with app.app_context():
        response = get_appliance_monthly_energy(user_id, appliance_id)
    assert response.status_code == 200
    
def test_get_appliance_monthly_energy_invalid_user_id(create_user_and_appliance,setup_teardown_mongo_connection):
    user_id, appliance_id = create_user_and_appliance
    with app.app_context():
        response = get_appliance_monthly_energy(str(ObjectId()), appliance_id)
    assert response.status_code == 404

def test_get_appliance_monthly_energy_invalid_appliance_id(create_user,setup_teardown_mongo_connection):
    user_id = create_user
    with app.app_context():
        response = get_appliance_monthly_energy(user_id, str(ObjectId))
    assert response.status_code == 404


def test_get_appliance_monthly_energy_deleted_appliance(create_user_with_deleted_appliance,setup_teardown_mongo_connection):
    user_id, deleted_appliance_id = create_user_with_deleted_appliance
    with app.app_context():
        response = get_appliance_monthly_energy(user_id, deleted_appliance_id)
    assert response.status_code == 404
# ____________________________________________________________________________

def test_get_room_monthly_energy_valid_ids(create_user_room_appliances,setup_teardown_mongo_connection):
    user_id, room_id = create_user_room_appliances
    with app.app_context():
        response = get_room_monthly_energy(user_id, room_id)
    assert response.status_code == 200
    # Add assertions based on your expected response data

def test_get_room_monthly_energy_invalid_user_id(setup_teardown_mongo_connection):
    with app.app_context():
        response = get_room_monthly_energy(str(ObjectId()),str(ObjectId()))
    assert response.status_code == 404
    assert response.json == {'message': 'User or Room not found'}

def test_get_room_monthly_energy_invalid_room_id(create_user,setup_teardown_mongo_connection):
    user_id = create_user
    with app.app_context():
        response = get_room_monthly_energy(user_id, str(ObjectId()))
    assert response.status_code == 404
    assert response.json == {'message': 'User or Room not found'}

def test_get_room_monthly_energy_deleted_room(create_user_deleted_room,setup_teardown_mongo_connection):
    user_id, deleted_room_id = create_user_deleted_room
    with app.app_context():
        response = get_room_monthly_energy(user_id, deleted_room_id)
    assert response.status_code == 404
    assert response.json == {'message': 'User or Room not found'}
    
# _____________________________________________________________________
def test_get_total_monthly_energy_valid_user_id(create_user_with_appliances,setup_teardown_mongo_connection):
    user_id = create_user_with_appliances
    with app.app_context():
        response = get_total_monthly_energy(str(user_id))
    assert response.status_code == 200

def test_get_total_monthly_energy_invalid_user_id():
    with app.app_context():
        response = get_total_monthly_energy(str(ObjectId()))
    assert response.status_code == 404


def test_get_total_monthly_energy_deleted_appliances(create_user_with_deleted_appliance,setup_teardown_mongo_connection):
    user_id ,_ = create_user_with_deleted_appliance
    with app.app_context():
        response = get_total_monthly_energy(str(user_id))
    assert response.status_code == 200
    data = json.loads(response.get_data(as_text=True))
    assert 'appliancesEnergy' in data[0]
    assert data and all('appliancesEnergy' in entry and isinstance(entry['appliancesEnergy'], list) and all(isinstance(appliance, dict) and 'energy' in appliance and 'name' in appliance for appliance in entry['appliancesEnergy']) for entry in data)
    assert 'title' in data[0]

def test_get_total_monthly_energy_no_appliances(create_user,setup_teardown_mongo_connection):
    user_id = create_user
    with app.app_context():
        response = get_total_monthly_energy(str(user_id))
    assert response.status_code == 200
    data = json.loads(response.get_data(as_text=True))
    assert 'appliancesEnergy' in data[0]
    assert data and all('appliancesEnergy' in entry and isinstance(entry['appliancesEnergy'], list) and all(isinstance(appliance, dict) and 'energy' in appliance and 'name' in appliance for appliance in entry['appliancesEnergy']) for entry in data)
    assert 'title' in data[0]
# ____________________________________________________


# Test cases
def test_get_appliance_yearly_energy_valid_ids(create_user_and_appliance,setup_teardown_mongo_connection):
    user_id, appliance_id = create_user_and_appliance
    with app.app_context():
        response = get_appliance_yearly_energy(user_id, appliance_id)
    assert response.status_code == 200
    
def test_get_appliance_yearly_energy_invalid_user_id(create_user_and_appliance,setup_teardown_mongo_connection):
    user_id, appliance_id = create_user_and_appliance
    with app.app_context():
        response = get_appliance_yearly_energy(str(ObjectId()), appliance_id)
    assert response.status_code == 404

def test_get_appliance_yearly_energy_invalid_appliance_id(create_user,setup_teardown_mongo_connection):
    user_id = create_user
    with app.app_context():
        response = get_appliance_yearly_energy(user_id, str(ObjectId))
    assert response.status_code == 404


def test_get_appliance_yearly_energy_deleted_appliance(create_user_with_deleted_appliance,setup_teardown_mongo_connection):
    user_id, deleted_appliance_id = create_user_with_deleted_appliance
    with app.app_context():
        response = get_appliance_yearly_energy(user_id, deleted_appliance_id)
    assert response.status_code == 404
# ____________________________________________________________________________

def test_get_room_yearly_energy_valid_ids(create_user_room_appliances,setup_teardown_mongo_connection):
    user_id, room_id = create_user_room_appliances
    with app.app_context():
        response = get_room_yearly_energy(user_id, room_id)
    assert response.status_code == 200

def test_get_room_yearly_energy_invalid_user_id(setup_teardown_mongo_connection):
    with app.app_context():
        response = get_room_yearly_energy(str(ObjectId()),str(ObjectId()))
    assert response.status_code == 404

def test_get_room_yearly_energy_invalid_room_id(create_user,setup_teardown_mongo_connection):
    user_id = create_user
    with app.app_context():
        response = get_room_yearly_energy(user_id, str(ObjectId()))
    assert response.status_code == 404


def test_get_room_yearly_energy_deleted_room(create_user_deleted_room,setup_teardown_mongo_connection):
    user_id, deleted_room_id = create_user_deleted_room
    with app.app_context():
        response = get_room_yearly_energy(user_id, deleted_room_id)
    assert response.status_code == 404

    
# _____________________________________________________________________
def test_get_total_yearly_energy_valid_user_id(create_user_with_appliances,setup_teardown_mongo_connection):
    user_id = create_user_with_appliances
    with app.app_context():
        response = get_total_yearly_energy(str(user_id))
    assert response.status_code == 200

def test_get_total_yearly_energy_invalid_user_id(setup_teardown_mongo_connection):
    with app.app_context():
        response = get_total_yearly_energy(str(ObjectId()))
    assert response.status_code == 404


def test_get_total_yearly_energy_deleted_appliances(create_user_with_deleted_appliance,setup_teardown_mongo_connection):
    user_id ,_ = create_user_with_deleted_appliance
    with app.app_context():
        response = get_total_yearly_energy(str(user_id))
    assert response.status_code == 200
    data = json.loads(response.get_data(as_text=True))
    assert 'appliancesEnergy' in data[0]
    assert data and all('appliancesEnergy' in entry and isinstance(entry['appliancesEnergy'], list) and all(isinstance(appliance, dict) and 'energy' in appliance and 'name' in appliance for appliance in entry['appliancesEnergy']) for entry in data)
    assert 'title' in data[0]

def test_get_total_yearly_energy_no_appliances(create_user,setup_teardown_mongo_connection):
    user_id = create_user
    with app.app_context():
        response = get_total_yearly_energy(str(user_id))
    assert response.status_code == 200
    data = json.loads(response.get_data(as_text=True))
    assert 'appliancesEnergy' in data[0]
    assert data and all('appliancesEnergy' in entry and isinstance(entry['appliancesEnergy'], list) and all(isinstance(appliance, dict) and 'energy' in appliance and 'name' in appliance for appliance in entry['appliancesEnergy']) for entry in data)
    assert 'title' in data[0]
# ____________________________________________________
# get_past_month_energy

def test_get_past_month_energy_valid_user_id(create_user_with_appliances,setup_teardown_mongo_connection):
    user_id = create_user_with_appliances
    with app.app_context():
        response = get_past_month_energy(str(user_id))
    assert response.status_code == 200

def test_get_past_month_energy_invalid_user_id(setup_teardown_mongo_connection):
    with app.app_context():
        response = get_past_month_energy(str(ObjectId()))
    assert response.status_code == 404


def test_get_past_month_energy_deleted_appliances(create_user_with_deleted_appliance,setup_teardown_mongo_connection):
    user_id ,_ = create_user_with_deleted_appliance
    with app.app_context():
        response = get_past_month_energy(str(user_id))
    assert response.status_code == 200
    data = json.loads(response.get_data())
    assert data == 0.0

def test_get_past_month_energy_no_appliances(create_user,setup_teardown_mongo_connection):
    user_id = create_user
    with app.app_context():
        response = get_past_month_energy(str(user_id))
    assert response.status_code == 200
    data = json.loads(response.get_data())
    assert data == 0.0
# _____________________________________________________________________

# get_current_month_energy

def test_get_current_month_energy_valid_user_id(create_user_with_appliances,setup_teardown_mongo_connection):
    user_id = create_user_with_appliances
    with app.app_context():
        response = get_current_month_energy(str(user_id))
    assert response.status_code == 200

def test_get_current_month_energy_invalid_user_id():
    with app.app_context():
        response = get_current_month_energy(str(ObjectId()))
    assert response.status_code == 404


def test_get_current_month_energy_deleted_appliances(create_user_with_deleted_appliance,setup_teardown_mongo_connection):
    user_id ,_ = create_user_with_deleted_appliance
    with app.app_context():
        response = get_current_month_energy(str(user_id))
    assert response.status_code == 200
    data = json.loads(response.get_data())
    assert data == 0.0

def test_get_current_month_energy_no_appliances(create_user,setup_teardown_mongo_connection):
    user_id = create_user
    with app.app_context():
        response = get_current_month_energy(str(user_id))
    assert response.status_code == 200
    data = json.loads(response.get_data())
    assert data == 0.0
